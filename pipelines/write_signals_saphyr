#!/usr/bin/env python

import numpy as np
from scipy import ndimage


def create_bnx_file():
    molecule_labels = list()
    molecule_backbones = list()
    second_labels = list()
    for bank_id in run_tree.bank_info:
        bank_path = run_tree.saphyr_tree.root + bank_id
        if dual:
            number_of_columns = len(run_tree.bank_info[bank_id])//3
        else:
            number_of_columns = len(run_tree.bank_info[bank_id]) // 2
        for i in range(number_of_columns):
            try:
                molecule_labels += list(np.load(f"{bank_path}/{i}_label.npy", allow_pickle=True))
                molecule_backbones += list(np.load(f"{bank_path}/{i}_backbone.npy", allow_pickle=True))
                if dual:
                    second_labels += list(np.load(f"{bank_path}/{i}_label2.npy", allow_pickle=True))
            except FileNotFoundError:
                continue
    if not dual:
        mols = [ndimage.white_tophat(molecule_labels[x], structure=np.ones(10)) for x in range(len(molecule_labels))]

        np.save("labels.npy", mols)
        np.save("backbones.npy", molecule_backbones)
    else:
        mols1 = [ndimage.white_tophat(molecule_labels[x], structure=np.ones(10)) for x in range(len(molecule_labels))]
        mols2 = [ndimage.white_tophat(second_labels[x], structure=np.ones(10)) for x in range(len(second_labels))]
        np.save("labels.npy", mols1)
        np.save("labels2.npy", mols2)
        np.save("backbones.npy", molecule_backbones)


def main(run_path: str, channel_id: int = 1):
    """
    :param run_path: path to the saphyr run folder
    :param channel_id: channel id can be 1 or 2. default is 1
    :return:
    """
    if channel_id == 1 or channel_id == 2:
        return run_path, True if channel_id == 1 else False
    else:
        raise ValueError("channel_id can be either 1 or 2")


if __name__ == "__main__":
    import fire
    from OptiScan.scan import SaphyrFileTree, SaphyrExtract
    from sys import argv
    run_path_, dual = fire.Fire(main)
    run_tree = SaphyrExtract(run_path_)
    create_bnx_file()
