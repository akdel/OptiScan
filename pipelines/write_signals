#!/usr/bin/env python

from sys import argv
import numpy as np


def create_bnx_file():
    for run_id in connection.db_runs:
        mols = connection.yield_molecule_signals_in_run(run_id)
        np.save(str(run_id)+"OptiScan_nick.npy", np.array([x[0] for x in mols], dtype="O"))
        mols = connection.yield_molecule_signals_in_run(run_id)
        np.save(str(run_id)+"OptiScan_back.npy", np.array([x[1] for x in mols], dtype="O"))


def get_number_of_molecules_in_run(run):
    n = 0
    for scan_id in connection.db_runs[run]:
        scan_info = connection.db_runs[run][scan_id]
        for col_id in scan_info["columns"]:
            col_info = scan_info["columns"][col_id]
            n += int(col_info["molecule_count"])
    return n


def main(database_name: str):
    """
    :param database_name: Name of the database created by 'extract_molecules_irys'
    :return:
    """
    return database_name


if __name__ == "__main__":
    from OptiScan.database import MoleculeConnector, molecules_to_bnxv
    import fire
    database_name_, bnx_file_template = fire.Fire(main)
    connection = MoleculeConnector(database_name_)
    connection.connect_db()
    print("Run folders in database:")
    for run_id in connection.db_runs:
        print(run_id)
        print("\tNumber of scans in run -> %s" % len(connection.db_runs[run_id]))
        print("\tNumber of molecules in run -> %s" % get_number_of_molecules_in_run(run_id))
    create_bnx_file()
