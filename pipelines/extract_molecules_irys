#!/usr/bin/env python

from OptiScan.database import MoleculeDB, MoleculeConnector
import multiprocessing as mp
from sys import argv
from os import path
import pathlib


def run_for_extraction(run_scan_pairs: [tuple]):
    print("run_for_extraction?")
    runs = list(set([run_id for run_id, _ in run_scan_pairs]))
    moldb_ = MoleculeDB(database_name_, runs, organism_, chip_dimension=chip_dimension_, saphyr=_saphyr_)
    for run_id, scan_id in run_scan_pairs:
        moldb_.connect_db()
        moldb_.extract_molecules_from_scan_in_run(run_id, scan_id, abstraction_threshold=contrast_threshold_)
        moldb_.insert_columns_for_scan(run_id, scan_id)


def create_tables(database_name, run_folders, organism, chip_dimension, saphyr_):
    moldb_ = MoleculeDB(database_name, list(set(run_folders)), organism, chip_dimension=chip_dimension, saphyr=saphyr_)
    moldb_.create_tables_first_time()


def main(run_folders: str, chip_dimension: str, database_name: str = "db.db",
         number_of_threads: int = 2, organism: str = "unknown",
         contrast_threshold: float = 100.):
    """
    :param run_folders: Run folder paths separated by commas.
    :param chip_dimension: Chip dimension in the format of 'x,y'. Most common sizes are '12,95', '12,108', '12,120'.
    Default is '12,95' and the test data chip size is '12,1'.
    :param database_name: A name for the database. default is 'db.db'
    :param number_of_threads: default is 4
    :param organism: Name of the sample/source organism. default is 'unknown'
    :param contrast_threshold: Contrast threshold to separate background from the molecule backbone. Default is 100
    :return:
    """

    run_folders = run_folders.split(",")
    for folder in run_folders:
        assert path.isdir(folder)
    if type(chip_dimension) == str:
        chip_dimension = tuple([int(x.strip()) for x in chip_dimension.split(',')])
    else:
        chip_dimension = (int(chip_dimension[0]), int(chip_dimension[1]))
    assert len(chip_dimension) == 2
    print(number_of_threads)
    contrast_threshold = float(contrast_threshold)
    if not database_name.endswith(".db"):
        database_name = database_name + ".db"
    if pathlib.Path(database_name).exists():
        raise FileExistsError("database name already exists.")
    create_tables(database_name, run_folders, organism, chip_dimension, False)
    print("Database initiated!")

    moldb = MoleculeDB(database_name, run_folders, organism, chip_dimension=chip_dimension,
                       saphyr=False)
    scan_jobs = moldb.split_scans_to_threads(number_of_threads)
    number_of_jobs = len(scan_jobs)

    return database_name, organism, chip_dimension, False, contrast_threshold, run_folders, number_of_jobs, scan_jobs


if __name__ == "__main__":
    import fire
    database_name_, organism_, chip_dimension_, _saphyr_,\
    contrast_threshold_, run_folders_, number_of_jobs_, scan_jobs_ = fire.Fire(main)
    moldb = MoleculeDB(database_name_, run_folders_, organism_, chip_dimension=chip_dimension_,
                       saphyr=_saphyr_)
    print(scan_jobs_)
    with mp.Pool(number_of_jobs_) as job:
        job.map(run_for_extraction, scan_jobs_)
    mc = MoleculeConnector(database_name_)
    mc.write_molecule_metadata_to_disk()
    mc.db.close()


