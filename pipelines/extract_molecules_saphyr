#!/usr/bin/env python

from OptiScan.scan import SaphyrExtract, SaphyrFileTree
import multiprocessing as mp
from sys import argv
from os import path


def run_for_extraction(run_scan_pairs: [tuple]):
    run = SaphyrExtract(run_folder_)
    run.save_molecules_for_bank_ids(run_scan_pairs, abstraction_threshold=contrast_threshold_)


def split_banks_to_threads(bank_ids: str, number_of_threads: int):
    assert len(scan_jobs) >= number_of_threads
    number_of_jobs_in_thread = int(len(scan_jobs)/number_of_threads)
    left_overs = int(len(scan_jobs) % number_of_threads)
    if number_of_jobs_in_thread < 1:
        return [[x] for x in scan_jobs]
    else:
        current = [scan_jobs[i:i+number_of_jobs_in_thread] for i in range(0, len(bank_ids) - left_overs,
                                                                          number_of_jobs_in_thread)]
        [current[i].append(scan_jobs[-i]) for i in range(1, left_overs + 1)]
        return current


def main(run_folder, number_of_threads: int = 4, contrast_threshold: float = 100.):
    """
    :param run_folder: Path to saphyr run data.
    :param number_of_threads: default is 4
    :param contrast_threshold: Contrast threshold to separate background from the molecule backbone. Default is 100
    :return:
    """
    return run_folder, number_of_threads, contrast_threshold



if __name__ == "__main__":
    import fire
    run_folder_, number_of_threads_, contrast_threshold_ = fire.Fire(main)
    run_tree = SaphyrFileTree.from_run_folder(run_folder_)
    scan_jobs = split_banks_to_threads(run_tree.get_bank_level_ids(), number_of_threads_)
    number_of_jobs = len(scan_jobs)

    with mp.Pool(number_of_jobs) as job:
        job.map(run_for_extraction, scan_jobs)


